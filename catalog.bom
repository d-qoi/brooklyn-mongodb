brooklyn.catalog:
  version: "2.0"
  iconUrl: https://webassets.mongodb.com/_com_assets/cms/mongodb-logo-rgb-j6w271g1xn.jpg
  
  publish:
    description: Entities to deploy and manage MongoDB servers and clients using Apache brooklyn
    license_code: Apache-2.0
    overview: README.md

  items:
    - id: mongodb-server
      name: MongoDB server
      description: A standalone MongoDB server, accessable via clients when they are given mongodb.server.url  
      itemType: entity
      item:
        type: org.apache.brooklyn.entity.software.base.VanillaSoftwareProcess

        # provisioning.properties:
        #   inboundPorts:
        #     - $brooklyn:attributeWhenReady("mongodb.port")
  
        brooklyn.parameters:
          - name: mongodb.ubuntukeyserv
            type: string
            label: Ubuntu Key Server
            description: The apt-key server URL
            default: hkp://keyserver.ubuntu.com:80
    
          - name: mongodb.ubuntukeyrecv
            type: string
            label: Ubuntu Key --recv thing
            description: the thing that goes after --recv in the apt-key command
            default: EA312927
    
          - name: mongodb.ubunturepo
            type: string
            label: Ubuntu Repo URL
            description: |
             The Repo URL of MongoDB for apt-get
             currently hard coded for 3.2, this needs to be changed if the version changes
            default: http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.2 multiverse
    
          - name: mongodb.rhelkeyserv
            type: string
            label: RHEL Key Server
            description: The server URL for the GPG key for RHEL based OSs (default is for version 3.2)
            default: https://www.mongodb.org/static/pgp/server-3.2.asc
            
          - name: mongodb.rhelrepo
            type: string
            label: RHEL Repo
            description: the server URL for the repo containing MongoDB for RHEL systems
            default: https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/stable/$basearch/    
    
          - name: mongodb.packagelist
            type: string
            label: Package Install list
            description: The space seperated list of packages to install
            default: mongodb-org

          - name: mongodb.port
            type: port
            label: mongoDB port
            description: MongoDB Port
            default: 27017
            
          - name: mongodb.version
            type: string
            label: MongoDB MajorVersion
            description: |
              Generally set at 3.2 for now 
            default: 3.2
    
        brooklyn.config:
          install.command: |
            if which apt-get 
            then
              echo "[MongoDB] This is a debian based system, setting up apt-get"
              # commands to install on Ubuntu
              # adding the key
              sudo apt-key adv --keyserver $UBUNTUKEYSERV --recv $UBUNTUKEYRECV
              echo "deb $UBUNTUREPO" | sudo tee /etc/apt/sources.list.d/mongodb-org-$MONGOVERS.list 
              sudo apt-get -y update
              sudo apt-get -y install $PACKAGES

            elif which yum # this needs to be tested more
            then
              echo "[mongodb] This is a RHEL based system, setting up yum"
              echo "name=MongoDB Repository
            baseurl=$RHELREPO
            gpgcheck=1
            enabled=1
            gpgkey=$RHELKEYSERV" | sudo tee /etc/yum.repos.d/mongodb.repo > /dev/null
    
              sudo yum -y install $PACKAGES
    
            else
              echo "OS is not supported by the install script" 
              exit 1
            fi
            echo "[MongoDB] Finished installing $PACKAGES"
            sudo service mongod stop
    
          customize.command: |
            sudo sed -i "s/port:.*/port: $MONGOPORT/g" /etc/mongod.conf
            sudo sed -i "s/bindIp:.*/bindIp: $MONGOIP/g" /etc/mongod.conf
            sudo service mongod restart
    
          launch.command: |
            sudo service mongod restart
    
          checkRunning.command: |
            sudo service mongod status
    
          stop.command: |
            sudo service mongod stop
  
          shell.env:
            UBUNTUREPO: $brooklyn:config("mongodb.ubunturepo")
            UBUNTUKEYSERV: $brooklyn:config("mongodb.ubuntukeyserv")
            UBUNTUKEYRECV: $brooklyn:config("mongodb.ubuntukeyrecv")
            RHELREPO: $brooklyn:config("mongodb.rhelrepo")
            PACKAGES: $brooklyn:config("mongodb.packagelist")
            MONGOPORT: $brooklyn:attributeWhenReady("mongodb.port")
            MONGOIP: $brooklyn:attributeWhenReady("host.subnet.address")
            MONGOVERS: $brooklyn:config("mongodb.version")
    
        brooklyn.initializers:
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: mongodb.server.status.bson
              command: |
                ADDRESS=$(cat /etc/mongod.conf | egrep -o [0-9]+\.[0-9]+\.[0-9]+.\[0-9]+)
                PORT=$(cat /etc/mongod.conf | grep port\: | cut -c 9-)
                mongo --host $ADDRESS --port $PORT --eval "db.runCommand( { serverStatus: 1 } ) "
              period: 100ms
    
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: mongodb.server.uptime
              command: |
                ADDRESS=$(cat /etc/mongod.conf | egrep -o [0-9]+\.[0-9]+\.[0-9]+.\[0-9]+)
                PORT=$(cat /etc/mongod.conf | grep port\: | cut -c 9-)
                mongo --host $ADDRESS --port $PORT --eval "db.runCommand( { serverStatus: 1 } ) ['uptime'] " | sed '3!d'
              period: 100ms
    
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: mongodb.server.opcounters.insert
              command: |
                ADDRESS=$(cat /etc/mongod.conf | egrep -o [0-9]+\.[0-9]+\.[0-9]+.\[0-9]+)
                PORT=$(cat /etc/mongod.conf | grep port\: | cut -c 9-)
                mongo --host $ADDRESS --port $PORT --eval "db.runCommand( { serverStatus: 1 } ) ['opcounters']['insert'] " | sed '3!d'
              period: 100ms
        
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: mongodb.server.opcounters.query
              command: |
                ADDRESS=$(cat /etc/mongod.conf | egrep -o [0-9]+\.[0-9]+\.[0-9]+.\[0-9]+)
                PORT=$(cat /etc/mongod.conf | grep port\: | cut -c 9-)
                mongo --host $ADDRESS --port $PORT --eval "db.runCommand( { serverStatus: 1 } ) ['opcounters']['query'] " | sed '3!d'
              period: 100ms
          
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: mongodb.server.opcounters.update
              command: |
                ADDRESS=$(cat /etc/mongod.conf | egrep -o [0-9]+\.[0-9]+\.[0-9]+.\[0-9]+)
                PORT=$(cat /etc/mongod.conf | grep port\: | cut -c 9-)
                mongo --host $ADDRESS --port $PORT --eval "db.runCommand( { serverStatus: 1 } ) ['opcounters']['update'] " | sed '3!d'
              period: 100ms
          
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: mongodb.server.opcounters.delete
              command: | 
                ADDRESS=$(cat /etc/mongod.conf | egrep -o [0-9]+\.[0-9]+\.[0-9]+.\[0-9]+)
                PORT=$(cat /etc/mongod.conf | grep port\: | cut -c 9-)
                mongo --host $ADDRESS --port $PORT --eval "db.runCommand( { serverStatus: 1 } ) ['opcounters']['delete'] " | sed '3!d'
              period: 100ms
    
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: mongodb.server.opcounters.getmore
              command: |
                ADDRESS=$(cat /etc/mongod.conf | egrep -o [0-9]+\.[0-9]+\.[0-9]+.\[0-9]+)
                PORT=$(cat /etc/mongod.conf | grep port\: | cut -c 9-)
                mongo --host $ADDRESS --port $PORT --eval "db.runCommand( { serverStatus: 1 } ) ['opcounters']['getmore'] " | sed '3!d'
              period: 100ms
    
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: mongodb.server.opcounters.command
              command: |
                ADDRESS=$(cat /etc/mongod.conf | egrep -o [0-9]+\.[0-9]+\.[0-9]+.\[0-9]+)
                PORT=$(cat /etc/mongod.conf | grep port\: | cut -c 9-)
                mongo --host $ADDRESS --port $PORT --eval "db.runCommand( { serverStatus: 1 } ) ['opcounters']['command'] " | sed '3!d'
              period: 100ms
    
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: mongodb.server.network.bytesIn
              command: |
                ADDRESS=$(cat /etc/mongod.conf | egrep -o [0-9]+\.[0-9]+\.[0-9]+.\[0-9]+)
                PORT=$(cat /etc/mongod.conf | grep port\: | cut -c 9-)
                mongo --host $ADDRESS --port $PORT --eval "db.runCommand( { serverStatus: 1 } ) ['network']['bytesIn'] " | sed '3!d'
              period: 100ms
    
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: mongodb.server.network.bytesOut
              command: |
                ADDRESS=$(cat /etc/mongod.conf | egrep -o [0-9]+\.[0-9]+\.[0-9]+.\[0-9]+)
                PORT=$(cat /etc/mongod.conf | grep port\: | cut -c 9-)
                mongo --host $ADDRESS --port $PORT --eval "db.runCommand( { serverStatus: 1 } ) ['network']['bytesOut'] " | sed '3!d'
              period: 100ms
    
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: mongodb.server.network.numRequests
              command: |
                ADDRESS=$(cat /etc/mongod.conf | egrep -o [0-9]+\.[0-9]+\.[0-9]+.\[0-9]+)
                PORT=$(cat /etc/mongod.conf | grep port\: | cut -c 9-)
                mongo --host $ADDRESS --port $PORT --eval "db.runCommand( { serverStatus: 1 } ) ['network']['numRequests'] " | sed '3!d'
              period: 100ms
    
        brooklyn.enrichers:
          - type: brooklyn.enricher.basic.Transformer
            brooklyn.config:
              enricher.sourceSensor: $brooklyn:sensor("service.isUp")
              enricher.targetSensor: $brooklyn:sensor("mongodb.address")
              enricher.targetValue: |
                $brooklyn:formatString("%s:%s", 
                  $brooklyn:attributeWhenReady("host.address"), $brooklyn:attributeWhenReady("mongodb.port"))

          - type: brooklyn.enricher.basic.Transformer
            brooklyn.config:
              enricher.sourceSensor: $brooklyn:sensor("service.isUp")
              enricher.targetSensor: $brooklyn:sensor("mongodb.subnet.address")
              enricher.targetValue:
                $brooklyn:formatString("%s:%s", 
                  $brooklyn:attributeWhenReady("host.subnet.address"), $brooklyn:attributeWhenReady("mongodb.port"))        

    - id: mongodb-replicaset
      name: MongoDB Replica Set
      description: |
        Uses the mongodb-server to create a replica set. The initial node is created then it adds a dynamic cluster
        of mongodb servers for the other members
      item:
        type: org.apache.brooklyn.entity.group.DynamicCluster

        brooklyn.enrichers:
          - type: org.apache.brooklyn.enricher.stock.Aggregator
            brooklyn.config:
              uniqueTag: mongodb-rs-address-aggregator
              enricher.aggregator.excludeBlank: true
              enricher.aggregating.fromMembers: true
              enricher.sourceSensor: $brooklyn:sensor("mongodb.address")
              enricher.targetSensor: $brooklyn:sensor("mongodb.rs.address.list")

          - type: org.apache.brooklyn.enricher.stock.Joiner
            brooklyn.config:
              uniqueTag: mongodb-rs-address-joiner
              enricher.sourceSensor: $brooklyn:sensor("mongodb.rs.address.list")
              enricher.targetSensor: $brooklyn:sensor("mongodb.rs.address.list.commaSeperated")
              seperated: ","
              quote: false
              minimum: $brooklyn:config("cluster.initial.size")

          - type: org.apache.brooklyn.enricher.stock.Aggregator
            brooklyn.config:
              uniqueTag: mongodb-rs-primary-node
              enricher.aggregator.excludeBlank: false
              enricher.aggregating.fromMembers: true
              enricher.sourceSensor: $brooklyn:sensor("mongodb.rs.primaryNode")
              enricher.targetSensor: $brooklyn:sensor("mongodb.rs.primaryNode.list")

        firstMemberSpec:
          $brooklyn:entitySpec:
            type: mongodb-server
            name: MongoDB RS First Node
            id: first-node

            brooklyn.initializers:
              - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
                brooklyn.config:
                  name: mongodb.rs.primaryNode
                  command: |
                    ADDRESS=$(cat /etc/mongod.conf | egrep -o [0-9]+\.[0-9]+\.[0-9]+.\[0-9]+)
                    PORT=$(cat /etc/mongod.conf | grep port\: | cut -c 9-)
                    mongo --host $ADDRESS --port $PORT --eval "db.runCommand( { isMaster : 1 } ) ['primary']" | sed '3!d'
                  period: 100ms

            shell.env:
              REPLSETNAME: $brooklyn:config("mongodb.rs.name")
              OPLOGSIZE: $brooklyn:config("mongodb.rs.oplogsize")
              SECINDPRE: $brooklyn:config("mongodb.rs.secindpre")
              ENAMAJREADCONCERN: $brooklyn:config("mongodb.rs.enamajreadconcern")

            brooklyn.config:
              is.first.node: true
        
              customize.command: |
                sudo sed -i "s/port:.*/port: $MONGOPORT/g" /etc/mongod.conf
                sudo sed -i "s/bindIp:.*/bindIp: $MONGOIP/g" /etc/mongod.conf
                echo "replication:
                   oplogSizeMB: $OPLOGSIZE
                   replSetName: $REPLSETNAME
                   secondaryIndexPrefetch: $SECINDPRE
                   enableMajorityReadConcern: $ENAMAJREADCONCERN" | sudo tee -a /etc/mongod.conf
                sudo service mongod restart
                sleep 5
                mongo --host $MONGOIP --port $MONGOPORT --eval "rs.initiate()"

              prestop.command: |
                mongo --host $MONGOIP --port $MONGOPORT --eval "rs.stepDown()"
                sleep 5
                while mongo --host $MONGOIP --port $MONGOPORT --eval "rs.isMaster()['ismaster']" | grep true
                do
                  sleep 5
                done

              stop.command: |
                mongo --host $PRIMARYNODE --eval "rs.remove('$MONGOIP:$MONGOPORT')"
                sleep 5
                sudo service mongod stop

        memberSpec:
          $brooklyn:entitySpec:
            type: mongodb-server
            name: MongoDB RS member
            id: mongodb-node

            brooklyn.initializers:
              - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
                brooklyn.config:
                  name: mongodb.rs.primaryNode
                  command: |
                    ADDRESS=$(cat /etc/mongod.conf | egrep -o [0-9]+\.[0-9]+\.[0-9]+.\[0-9]+)
                    PORT=$(cat /etc/mongod.conf | grep port\: | cut -c 9-)
                    mongo --host $ADDRESS --port $PORT --eval "db.runCommand( { isMaster : 1 } ) ['primary']" | sed '3!d'
                  period: 100ms

            brooklyn.config:
              is.first.node: false
            
              customize.command: |
                sudo sed -i "s/port:.*/port: $MONGOPORT/g" /etc/mongod.conf
                sudo sed -i "s/bindIp:.*/bindIp: $MONGOIP/g" /etc/mongod.conf
                echo "replication:
                   oplogSizeMB: $OPLOGSIZE
                   replSetName: $REPLSETNAME
                   secondaryIndexPrefetch: $SECINDPRE
                   enableMajorityReadConcern: $ENAMAJREADCONCERN" | sudo tee -a /etc/mongod.conf
                sudo service mongod restart
                sleep 5
                OTHERNODEADDRESS=$(echo $NODELIST | awk '{print $1}')
                PRIMARYNODEADDRESS=$(mongo --host $OTHERNODEADDRESS --port $MONGOPORT --eval "db.runCommand( { isMaster : 1 } ) ['primary']" | sed '3!d')
                echo $PRIMARYNODEADDRESS
                mongo --host $PRIMARYNODE --eval "rs.add('$MONGOIP:$MONGOPORT')"


              prestop.command: |
                mongo --host $MONGOIP --port $MONGOPORT --eval "rs.stepDown()"
                sleep 5
                while mongo --host $MONGOIP --port $MONGOPORT --eval "rs.isMaster()['ismaster']" | grep true
                do
                  sleep 5
                done

              stop.command: |
                mongo --host $PRIMARYNODE --eval "rs.remove('$MONGOIP:$MONGOPORT')"
                sleep 5
                sudo service mongod stop



            shell.env:
              PRIMARYNODE: $brooklyn:component("first-node").attributeWhenReady("mongodb.rs.primaryNode")
              REPLSETNAME: $brooklyn:config("mongodb.rs.name")
              OPLOGSIZE: $brooklyn:config("mongodb.rs.oplogsize")
              SECINDPRE: $brooklyn:config("mongodb.rs.secindpre")
              ENAMAJREADCONCERN: $brooklyn:config("mongodb.rs.enamajreadconcern")
              NODELIST: $brooklyn:attributeWhenReady("mongodb.rs.address.list")



    - id: mongodb-replicaset-template
      description: |
        A cluster of MongoDB Nodes that are joined together in a Replica Set
        allowing for data replication across multiple nodes.
      name: "MongoDB Replica Set"
      iconUrl: https://webassets.mongodb.com/_com_assets/cms/mongodb-logo-rgb-j6w271g1xn.jpg
      itemType: template
      item:
        services:
          - type: mongodb-replicaset-application
            name: "MongoDB Replica Set"

    - id: mongodb-server-template
      description: |
        A single MongoDB Node to be used as a nosql database
      name: "MongoDB Server"
      iconUrl: https://webassets.mongodb.com/_com_assets/cms/mongodb-logo-rgb-j6w271g1xn.jpg
      itemType: template
      item:
          services:
            - type: mongodb-server-application
              name: "MongoDB Server"

    - id: mongodb-replicaset-application
      description: |
        A cluster of MongoDB Nodes that are joined together in a Replica Set
        allowing for data replication across multiple nodes.
      name: "MongoDB Replica Set"
      iconUrl: https://webassets.mongodb.com/_com_assets/cms/mongodb-logo-rgb-j6w271g1xn.jpg
      itemType: entity
      item: 
        type: org.apache.brooklyn.entity.stock.BasicApplication

        brooklyn.parameters:
          - name: mongodb.rs.name
            type: string
            label: Replica Set name
            description: |
              The name of the Replica Set
            default: ReplicaSetName

          - name: mongodb.rs.oplogsize
            type: string
            label: Operation Log Size
            description: |
              The Size of the operation log in Megabytes
            default: 4096

          - name: mongodb.rs.secindpre
            type: string
            label: Secondary Index Prefetch
            description: |
              Indexes that a secondary member will load into memory before applying 
              operations from oplog 
            default: all

          - name: mongodb.rs.enamajreadconcern
            type: string
            label: Enable Majority Read Concern
            description: |
              Enable Majority Read Concern
            default: false

          - name: mongodb.rs.password
            type: string
            label: Replica Set password
            description: |
              Assuming that this is not also enterprise only, the authentication for MongoDB RS
            default: ChangeMe123

          - name: cluster.initial.size
            type: string
            label: initial size of the cluster
            description: |
              Initial size of the Replica Set Cluster. Minimum is 3
            default: 3

          - name: mongodb.ubuntukeyserv
            type: string
            label: Ubuntu Key Server
            description: The apt-key server URL
            default: hkp://keyserver.ubuntu.com:80
    
          - name: mongodb.ubuntukeyrecv
            type: string
            label: Ubuntu Key --recv thing
            description: the thing that goes after --recv in the apt-key command
            default: EA312927
    
          - name: mongodb.ubunturepo
            type: string
            label: Ubuntu Repo URL
            description: |
             The Repo URL of MongoDB for apt-get
             currently hard coded for 3.2, this needs to be changed if the version changes
            default: http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.2 multiverse
    
          - name: mongodb.rhelkeyserv
            type: string
            label: RHEL Key Server
            description: The server URL for the GPG key for RHEL based OSs (default is for version 3.2)
            default: https://www.mongodb.org/static/pgp/server-3.2.asc
            
          - name: mongodb.rhelrepo
            type: string
            label: RHEL Repo
            description: the server URL for the repo containing MongoDB for RHEL systems
            default: https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/stable/$basearch/    
    
          - name: mongodb.packagelist
            type: string
            label: Package Install list
            description: The space seperated list of packages to install
            default: mongodb-org

          - name: mongodb.port
            type: port
            label: mongoDB port
            description: MongoDB Port
            default: 27017
            
          - name: mongodb.version
            type: string
            label: MongoDB MajorVersion
            description: |
              Generally set at 3.2 for now 
            default: 3.2

        brooklyn.children:
          - type: mongodb-replicaset
            name: "MongoDB Replica Set"

    - id: mongodb-server-application
      description: |
        A cluster of MongoDB Nodes that are joined together in a Replica Set
        allowing for data replication across multiple nodes.
      name: "MongoDB Replica Set"
      iconUrl: https://webassets.mongodb.com/_com_assets/cms/mongodb-logo-rgb-j6w271g1xn.jpg
      itemType: entity
      item: 
        type: org.apache.brooklyn.entity.stock.BasicApplication
        brooklyn.parameters:
          - name: mongodb.ubuntukeyserv
            type: string
            label: Ubuntu Key Server
            description: The apt-key server URL
            default: hkp://keyserver.ubuntu.com:80
    
          - name: mongodb.ubuntukeyrecv
            type: string
            label: Ubuntu Key --recv thing
            description: the thing that goes after --recv in the apt-key command
            default: EA312927
    
          - name: mongodb.ubunturepo
            type: string
            label: Ubuntu Repo URL
            description: |
             The Repo URL of MongoDB for apt-get
             currently hard coded for 3.2, this needs to be changed if the version changes
            default: http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.2 multiverse
    
          - name: mongodb.rhelkeyserv
            type: string
            label: RHEL Key Server
            description: The server URL for the GPG key for RHEL based OSs (default is for version 3.2)
            default: https://www.mongodb.org/static/pgp/server-3.2.asc
            
          - name: mongodb.rhelrepo
            type: string
            label: RHEL Repo
            description: the server URL for the repo containing MongoDB for RHEL systems
            default: https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/stable/$basearch/    
    
          - name: mongodb.packagelist
            type: string
            label: Package Install list
            description: The space seperated list of packages to install
            default: mongodb-org

          - name: mongodb.port
            type: port
            label: mongoDB port
            description: MongoDB Port
            default: 27017
            
          - name: mongodb.version
            type: string
            label: MongoDB MajorVersion
            description: |
              Generally set at 3.2 for now 
            default: 3.2

        brooklyn.children:
          - type: mongodb-server
            name: "MongoDB Server"
